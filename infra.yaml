Parameters:
  ParentVPCStack:
    Description: 'Provide Stack name of parent VPC stack'
    Type: String
    Default: eb-demo
    MinLength: '1'
    MaxLength: '128'
    AllowedPattern: '^[a-zA-Z]+[0-9a-zA-Z\-]*$'
  App:
    Description: 'Provide Stack name of application'
    Type: String
    Default: eb-demo
    MinLength: '1'
    MaxLength: '128'
    AllowedPattern: '^[a-zA-Z]+[0-9a-zA-Z\-]*$'
  DBName:
    Default: ebdb
    Description: My database
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
  DBInstanceClass:
    Default: db.m5.large
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.
  DBAllocatedStorage:
    Default: '50'
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 20 and 65536 GiB.
  DBUsername:
    Default: admin
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: Password MySQL database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.

Resources:
####################### Network Stack ###################################### 
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: dedicated
      Tags:
      - Key: Name
        Value: !Ref ParentVPCStack
  
  PubSuba:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: !Sub
          - ${Name}-public-subnet-a
          - { Name: !Ref ParentVPCStack }

  PubSubb:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: !Sub
          - ${Name}-public-subnet-b
          - { Name: !Ref ParentVPCStack }

  PriSuba:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: !Sub
          - ${Name}-private-subnet-a
          - { Name: !Ref ParentVPCStack }

  PriSubb:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: !Sub
          - ${Name}-private-subnet-b
          - { Name: !Ref ParentVPCStack }
  
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub
          - ${Name}-igw
          - { Name: !Ref ParentVPCStack }

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: IGW

  NATa:
   Type: AWS::EC2::NatGateway
   Properties:
      AllocationId:
         Fn::GetAtt:
         - EIPa
         - AllocationId
      SubnetId:
         Ref: PubSuba
      Tags:
      - Key: Name
        Value: !Sub
          - ${Name}-nat-a
          - { Name: !Ref ParentVPCStack }
  EIPa:
    Type: AWS::EC2::EIP
    Properties:
        Domain: vpc

  PriRoutea:
    Type: AWS::EC2::Route
    Properties:
        RouteTableId:
          Ref: PriaRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
          Ref: NATa

  NATb:
   Type: AWS::EC2::NatGateway
   Properties:
      AllocationId:
         Fn::GetAtt:
         - EIPb
         - AllocationId
      SubnetId:
         Ref: PubSuba
      Tags:
      - Key: Name
        Value: !Sub
          - ${Name}-nat-b
          - { Name: !Ref ParentVPCStack }
  EIPb:
    Type: AWS::EC2::EIP
    Properties:
        Domain: vpc

  PriRouteb:
    Type: AWS::EC2::Route
    Properties:
        RouteTableId:
          Ref: PribRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
          Ref: NATb

  PriaRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub
          - ${Name}-private-subnet-a-rt
          - { Name: !Ref ParentVPCStack }

  PribRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub
          - ${Name}-private-subnet-b-rt
          - { Name: !Ref ParentVPCStack }
  
  PubRoute:
    Type: AWS::EC2::Route
    Properties:
        RouteTableId:
          Ref: PubRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: IGW

  PubRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub
          - ${Name}-public-rt
          - { Name: !Ref ParentVPCStack }
  
  SubnetRouteTableAssociationpria:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PriSuba
      RouteTableId:
        Ref: PriaRouteTable

  SubnetRouteTableAssociationprib:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PriSubb
      RouteTableId:
        Ref: PribRouteTable

  SubnetRouteTableAssociationpuba:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PubSuba
      RouteTableId:
        Ref: PubRouteTable

  SubnetRouteTableAssociationpubb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PubSubb
      RouteTableId:
        Ref: PubRouteTable  

############## EB Stack ############################# 
  Application:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName: 
        Ref: App
      Description: AWS Elastic Beanstalk Wordpress
  AppVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName:
        Ref: Application
      Description: AWS ElasticBeanstalk Sample Application Version
      SourceBundle:
        S3Bucket: !Sub "elasticbeanstalk-samples-${AWS::Region}"
        S3Key: php-newsample-app.zip
  Environment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName:
        Ref: Application
      EnvironmentName: 
        Ref: App
      Description: AWS ElasticBeanstalk Sample Environment
      SolutionStackName: 64bit Amazon Linux 2 v3.2.0 running PHP 7.2
      OptionSettings:
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value: !Ref InstanceProfile
        - Namespace: aws:ec2:instances
          OptionName: InstanceTypes
          Value: t3.small
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: EnvironmentType
          Value: LoadBalanced
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: LoadBalancerType
          Value: application
        - Namespace: aws:ec2:vpc
          OptionName: VPCId
          Value: !Ref VPC
        - Namespace: aws:ec2:vpc
          OptionName: Subnets
          Value: !Sub
          - "${sub1},${sub2}"
          - {sub1: !Ref PriSuba, sub2: !Ref PriSubb }
        - Namespace: aws:ec2:vpc
          OptionName: ELBSubnets
          Value: !Sub
          - "${sub1},${sub2}"
          - {sub1: !Ref PubSuba, sub2: !Ref PubSubb }
      VersionLabel:
        Ref: AppVersion
  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Comment: 'Cloudfront Distribution pointing ALB Origin'
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - DELETE
            - OPTIONS
            - PATCH
            - POST
            - PUT
          TargetOriginId: !Sub
            - 'arn:aws:elasticloadbalancing:${region}:${account}:loadbalancer/app/${name}'
            - {region: !Ref "AWS::Region",account: !Ref "AWS::AccountId",name: !Select [0, !Split [".", !GetAtt Environment.EndpointURL]]}
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          ViewerProtocolPolicy: allow-all
        Origins:
          - DomainName: !GetAtt Environment.EndpointURL
            Id: !Sub
            - 'arn:aws:elasticloadbalancing:${region}:${account}:loadbalancer/app/${name}'
            - {region: !Ref "AWS::Region",account: !Ref "AWS::AccountId",name: !Select [0, !Split [".", !GetAtt Environment.EndpointURL]]}
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: match-viewer
              OriginSSLProtocols:
                - TLSv1
                - TLSv1.1
                - TLSv1.2
                - SSLv3
        Enabled: true
  InstanceRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:                   
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: Beanstalk EC2 role
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles: 
        - !Ref InstanceRole

############## RDS Stack #############################
  DBSubnetGroup: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: Custom VPC Subnet Group
      SubnetIds: 
        - !Ref PriSuba
        - !Ref PriSubb
  RDSSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: String
      GroupName: !Ref App
      SecurityGroupIngress: 
        - CidrIp: 10.0.0.0/16
          IpProtocol: "-1"
      VpcId: !Ref VPC
  RDSCluster:
    Type: 'AWS::RDS::DBCluster'
    Properties:
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBClusterIdentifier: !Ref App
      DBSubnetGroupName: !Ref DBSubnetGroup
      DatabaseName: !Ref DBName
      Engine: aurora
      VpcSecurityGroupIds: 
        - !Ref RDSSG
  RDSDBInstance1:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: !Sub
          - ${name}-instance1
          - { name: !Ref App}
      Engine: aurora
      DBClusterIdentifier: !Ref RDSCluster
      PubliclyAccessible: 'false'
      DBInstanceClass: db.r4.large
  RDSDBInstance2:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: !Sub
          - ${name}-instance2
          - { name: !Ref App}
      Engine: aurora
      DBClusterIdentifier: !Ref RDSCluster
      PubliclyAccessible: 'false'
      DBInstanceClass: db.r4.large

############## CICD Stack #############################

  Project:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref App
      Description: A description about my project
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: no_artifacts
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        EnvironmentVariables:
        - Name: appname
          Type: PLAINTEXT
          Value: !Ref App
      Source:
        Location: https://github.com/farganod/eb-demo
        Type: GITHUB
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [codebuild.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - '*'
                Effect: Allow
                Resource: '*'
  Secret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Ref App
      Description: "This secret has a dynamically generated secret password."
      SecretString: !Sub 
        - '{"username":"${name}","password":"${pass}","url":"${url}","port":"${port}","dbname":"${dbname}","vpcid":"${vpcid}","prisuba":"${prisuba}","prisubb":"${prisubb}","rdssg":"${rdssg}", "cfid":"${cfid}"}'
        - name: !Ref DBUsername
          pass: !Ref DBPassword
          url: !GetAtt RDSCluster.Endpoint.Address
          port: !GetAtt RDSCluster.Endpoint.Port
          dbname: !Ref DBName
          vpcid: !Ref VPC
          prisuba: !Ref PriSuba
          prisubb: !Ref PriSubb
          rdssg: !Ref RDSSG
          cfid: !Ref CloudFrontDistribution
Outputs:
  CFID:
    Description: Cloudfront ID
    Value: !Ref CloudFrontDistribution
